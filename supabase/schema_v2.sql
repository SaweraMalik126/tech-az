-- =====================================================
-- TeachMe.ai Database Schema v2 (Upgraded, Multitenant, Scalable)
-- =====================================================
-- Notes:
-- - Global users use UUID primary keys.
-- - All org-scoped entities use UUID primary keys plus a short numeric public_id (3-4 digits)
--   unique per (org_id, entity), auto-generated by trigger for human-friendly references.
-- - Multitenancy: every org-owned row carries org_id.
-- - Enum types are used for stricter data integrity.
-- - Audit logs are partitioned by month for scale.
-- - Production RLS policies are provided as stubs (disabled by default for development).

-- =====================================================
-- 0. Extensions
-- =====================================================
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =====================================================
-- 1. Enum Types
-- =====================================================
DO $$ BEGIN
  CREATE TYPE org_status AS ENUM ('active','suspended','archived');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE plan_tier AS ENUM ('free','standard','enterprise');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE user_status AS ENUM ('active','inactive','banned');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE auth_provider AS ENUM ('password','google','facebook','linkedin','sso','otp');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE membership_role AS ENUM ('super_admin','org_admin','teacher','student','parent');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE scope_type AS ENUM ('org','class','course','section');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE relationship_type AS ENUM ('father','mother','guardian','other');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE class_level_category AS ENUM ('primary','secondary','college','bachelors','masters');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE teacher_role AS ENUM ('primary','assistant');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE enrollment_status AS ENUM ('active','waitlisted','dropped','completed','suspended');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE session_mode AS ENUM ('live','async');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE attendance_status AS ENUM ('present','absent','late','excused');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE conversation_scope AS ENUM ('ai_tutor','section','one_to_one','group','admin_global');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE sender_type AS ENUM ('user','ai');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE vector_purpose AS ENUM ('tutor','content','faq');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE vector_backend AS ENUM ('pgv','pinecone','weaviate','faiss');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE assessment_type AS ENUM ('quiz','problem','role_reversal','self_check');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE visibility_scope AS ENUM ('org','section','public');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE generated_by AS ENUM ('ai','admin','teacher');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE item_type AS ENUM ('mcq','short','code','scenario','teachback');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE review_status AS ENUM ('auto_final','queued_peer','peer_done');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE grade_tier AS ENUM ('top_1','top_5','top_10','top_20','normal','below','fail');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE announcement_audience AS ENUM ('org','section','role:student','role:parent');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;
DO $$ BEGIN
  CREATE TYPE content_kind AS ENUM ('file','slide','video','whiteboard','infographic','link');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- =====================================================
-- 2. Utility Tables & Functions (short public_id, timestamps)
-- =====================================================
-- Maintains per-entity short id counters scoped by org
CREATE TABLE IF NOT EXISTS entity_short_ids (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL,
  entity TEXT NOT NULL,
  last_value INT NOT NULL DEFAULT 999, -- next allocation will be last_value + 1
  UNIQUE (org_id, entity)
);

-- Allocates the next 3-4 digit public_id (1000..9999). Rolls over after 9999.
-- Uniqueness is enforced per (table, org_id, public_id) in target tables.
CREATE OR REPLACE FUNCTION generate_short_public_id(p_org_id UUID, p_entity TEXT)
RETURNS INT AS $$
DECLARE
  v_next INT;
BEGIN
  INSERT INTO entity_short_ids (org_id, entity, last_value)
  VALUES (p_org_id, p_entity, 999)
  ON CONFLICT (org_id, entity) DO NOTHING;

  UPDATE entity_short_ids
  SET last_value = CASE WHEN last_value >= 9999 THEN 1000 ELSE last_value + 1 END
  WHERE org_id = p_org_id AND entity = p_entity
  RETURNING last_value INTO v_next;

  IF v_next < 1000 THEN
    -- ensure within 3-4 digit window
    v_next := 1000;
    UPDATE entity_short_ids SET last_value = v_next WHERE org_id = p_org_id AND entity = p_entity;
  END IF;

  RETURN v_next;
END;
$$ LANGUAGE plpgsql;

-- Generic updated_at trigger
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Helper to fill public_id before insert
CREATE OR REPLACE FUNCTION set_public_id()
RETURNS TRIGGER AS $$
DECLARE
  v_public_id INT;
  v_entity TEXT;
BEGIN
  IF NEW.public_id IS NULL THEN
    v_entity := TG_ARGV[0];
    v_public_id := generate_short_public_id(NEW.org_id, v_entity);
    NEW.public_id = v_public_id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 3. Multitenancy & RBAC
-- =====================================================
CREATE TABLE IF NOT EXISTS organizations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  public_id INT,
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  status org_status NOT NULL DEFAULT 'active',
  plan plan_tier NOT NULL DEFAULT 'free',
  settings JSONB DEFAULT '{}',
  domain TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE UNIQUE INDEX IF NOT EXISTS idx_organizations_public_id ON organizations(public_id);
CREATE TRIGGER tr_organizations_updated BEFORE UPDATE ON organizations
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- Global user
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT UNIQUE NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  phone TEXT,
  status user_status NOT NULL DEFAULT 'active',
  auth_provider auth_provider DEFAULT 'password',
  timezone TEXT DEFAULT 'UTC',
  language TEXT DEFAULT 'en',
  prefs JSONB DEFAULT '{"notifications": true}',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
CREATE TRIGGER tr_users_updated BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- Per-org membership
CREATE TABLE IF NOT EXISTS org_memberships (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  role membership_role NOT NULL,
  status TEXT NOT NULL DEFAULT 'active',
  joined_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, user_id)
);

-- Scoped RBAC override
CREATE TABLE IF NOT EXISTS role_bindings (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  scope_type scope_type NOT NULL,
  scope_id UUID NOT NULL,
  permissions JSONB NOT NULL DEFAULT '[]'
);
CREATE INDEX IF NOT EXISTS idx_role_bindings_scope ON role_bindings(org_id, scope_type, scope_id);

-- Parent linking
CREATE TABLE IF NOT EXISTS parent_links (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  parent_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  student_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  relationship relationship_type NOT NULL,
  verified_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_parent_links_pub BEFORE INSERT ON parent_links
FOR EACH ROW EXECUTE FUNCTION set_public_id('parent_links');
CREATE TRIGGER tr_parent_links_updated BEFORE UPDATE ON parent_links
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- =====================================================
-- 4. Academic Hierarchy
-- =====================================================
CREATE TABLE IF NOT EXISTS terms (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  name TEXT NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_terms_pub BEFORE INSERT ON terms
FOR EACH ROW EXECUTE FUNCTION set_public_id('terms');
CREATE TRIGGER tr_terms_updated BEFORE UPDATE ON terms
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS class_levels (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  name TEXT NOT NULL,
  category class_level_category NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_class_levels_pub BEFORE INSERT ON class_levels
FOR EACH ROW EXECUTE FUNCTION set_public_id('class_levels');
CREATE TRIGGER tr_class_levels_updated BEFORE UPDATE ON class_levels
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS classes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  class_level_id UUID NOT NULL REFERENCES class_levels(id) ON DELETE RESTRICT,
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_classes_level ON classes(org_id, class_level_id);
CREATE TRIGGER tr_classes_pub BEFORE INSERT ON classes
FOR EACH ROW EXECUTE FUNCTION set_public_id('classes');
CREATE TRIGGER tr_classes_updated BEFORE UPDATE ON classes
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS courses (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  class_id UUID NOT NULL REFERENCES classes(id) ON DELETE RESTRICT,
  term_id UUID REFERENCES terms(id) ON DELETE SET NULL,
  code TEXT,
  title TEXT NOT NULL,
  description TEXT,
  language_defaults TEXT[],
  subject_tags TEXT[],
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_courses_org_class ON courses(org_id, class_id);
CREATE TRIGGER tr_courses_pub BEFORE INSERT ON courses
FOR EACH ROW EXECUTE FUNCTION set_public_id('courses');
CREATE TRIGGER tr_courses_updated BEFORE UPDATE ON courses
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS sections (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  course_id UUID NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
  term_id UUID REFERENCES terms(id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  schedule JSONB,
  capacity INT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_sections_course ON sections(org_id, course_id);
CREATE TRIGGER tr_sections_pub BEFORE INSERT ON sections
FOR EACH ROW EXECUTE FUNCTION set_public_id('sections');
CREATE TRIGGER tr_sections_updated BEFORE UPDATE ON sections
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS teacher_assignments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  section_id UUID NOT NULL REFERENCES sections(id) ON DELETE CASCADE,
  teacher_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  role teacher_role NOT NULL DEFAULT 'primary',
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_teacher_assignments_section ON teacher_assignments(org_id, section_id);
CREATE TRIGGER tr_teacher_assignments_pub BEFORE INSERT ON teacher_assignments
FOR EACH ROW EXECUTE FUNCTION set_public_id('teacher_assignments');

CREATE TABLE IF NOT EXISTS enrollments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  section_id UUID NOT NULL REFERENCES sections(id) ON DELETE CASCADE,
  student_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status enrollment_status NOT NULL DEFAULT 'active',
  enrolled_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_enrollments_section ON enrollments(org_id, section_id);
CREATE INDEX IF NOT EXISTS idx_enrollments_student ON enrollments(org_id, student_user_id);
CREATE TRIGGER tr_enrollments_pub BEFORE INSERT ON enrollments
FOR EACH ROW EXECUTE FUNCTION set_public_id('enrollments');

-- =====================================================
-- 5. Content & Sessions
-- =====================================================
CREATE TABLE IF NOT EXISTS modules (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  section_id UUID NOT NULL REFERENCES sections(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  sort_order INT NOT NULL DEFAULT 1,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_modules_pub BEFORE INSERT ON modules
FOR EACH ROW EXECUTE FUNCTION set_public_id('modules');
CREATE TRIGGER tr_modules_updated BEFORE UPDATE ON modules
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS lessons (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  module_id UUID NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  content_rich JSONB,
  assets UUID[],
  whiteboard_json JSONB,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_lessons_module ON lessons(org_id, module_id);
CREATE TRIGGER tr_lessons_pub BEFORE INSERT ON lessons
FOR EACH ROW EXECUTE FUNCTION set_public_id('lessons');
CREATE TRIGGER tr_lessons_updated BEFORE UPDATE ON lessons
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS assets (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  owner_user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  kind content_kind NOT NULL,
  url TEXT NOT NULL,
  mime TEXT,
  size_bytes BIGINT,
  visibility visibility_scope NOT NULL DEFAULT 'org',
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_assets_pub BEFORE INSERT ON assets
FOR EACH ROW EXECUTE FUNCTION set_public_id('assets');
CREATE TRIGGER tr_assets_updated BEFORE UPDATE ON assets
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  section_id UUID NOT NULL REFERENCES sections(id) ON DELETE CASCADE,
  start_at TIMESTAMPTZ NOT NULL,
  end_at TIMESTAMPTZ,
  mode session_mode NOT NULL DEFAULT 'live',
  recording_asset_id UUID REFERENCES assets(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_sessions_section ON sessions(org_id, section_id, start_at);
CREATE TRIGGER tr_sessions_pub BEFORE INSERT ON sessions
FOR EACH ROW EXECUTE FUNCTION set_public_id('sessions');

CREATE TABLE IF NOT EXISTS attendance (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
  student_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status attendance_status NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_attendance_session ON attendance(org_id, session_id);
CREATE INDEX IF NOT EXISTS idx_attendance_student ON attendance(org_id, student_user_id);
CREATE TRIGGER tr_attendance_pub BEFORE INSERT ON attendance
FOR EACH ROW EXECUTE FUNCTION set_public_id('attendance');

-- =====================================================
-- 6. AI Tutor & Chat
-- =====================================================
CREATE TABLE IF NOT EXISTS conversations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  scope_type conversation_scope NOT NULL,
  scope_id UUID,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_conversations_pub BEFORE INSERT ON conversations
FOR EACH ROW EXECUTE FUNCTION set_public_id('conversations');

CREATE TABLE IF NOT EXISTS conversation_participants (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_conv_participants ON conversation_participants(org_id, conversation_id);

CREATE TABLE IF NOT EXISTS messages (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
  sender_type sender_type NOT NULL,
  sender_user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  body TEXT NOT NULL,
  attachments UUID[],
  lang TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_messages_conv_time ON messages(org_id, conversation_id, created_at);

-- Vector RAG boundaries per org
CREATE TABLE IF NOT EXISTS vector_spaces (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  name TEXT NOT NULL,
  purpose vector_purpose NOT NULL,
  backend vector_backend NOT NULL,
  index_name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_vector_spaces_pub BEFORE INSERT ON vector_spaces
FOR EACH ROW EXECUTE FUNCTION set_public_id('vector_spaces');

CREATE TABLE IF NOT EXISTS embedding_docs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  vector_space_id UUID NOT NULL REFERENCES vector_spaces(id) ON DELETE CASCADE,
  source_type TEXT NOT NULL, -- lesson|asset|faq
  source_id UUID,
  chunk_id TEXT,
  hash TEXT,
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_embedding_docs_space ON embedding_docs(org_id, vector_space_id);

-- =====================================================
-- 7. AI Assessments (auto-graded)
-- =====================================================
CREATE TABLE IF NOT EXISTS assessments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  course_id UUID NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
  section_id UUID REFERENCES sections(id) ON DELETE SET NULL,
  type assessment_type NOT NULL,
  prompt_seed TEXT,
  policy_json JSONB,
  visibility visibility_scope NOT NULL DEFAULT 'org',
  generated_by generated_by NOT NULL DEFAULT 'ai',
  published_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_assessments_course ON assessments(org_id, course_id);
CREATE TRIGGER tr_assessments_pub BEFORE INSERT ON assessments
FOR EACH ROW EXECUTE FUNCTION set_public_id('assessments');
CREATE TRIGGER tr_assessments_updated BEFORE UPDATE ON assessments
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS assessment_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  assessment_id UUID NOT NULL REFERENCES assessments(id) ON DELETE CASCADE,
  item_type item_type NOT NULL,
  stem TEXT NOT NULL,
  options JSONB,
  answer_key JSONB,
  rubric_json JSONB,
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_assessment_items_assessment ON assessment_items(org_id, assessment_id);
CREATE TRIGGER tr_assessment_items_pub BEFORE INSERT ON assessment_items
FOR EACH ROW EXECUTE FUNCTION set_public_id('assessment_items');

CREATE TABLE IF NOT EXISTS attempts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  assessment_id UUID NOT NULL REFERENCES assessments(id) ON DELETE CASCADE,
  student_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  started_at TIMESTAMPTZ DEFAULT now(),
  submitted_at TIMESTAMPTZ,
  answers_json JSONB,
  ai_score NUMERIC,
  ai_feedback TEXT,
  explanations JSONB,
  review_status review_status DEFAULT 'auto_final',
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_attempts_assessment ON attempts(org_id, assessment_id);
CREATE INDEX IF NOT EXISTS idx_attempts_student ON attempts(org_id, student_user_id);
CREATE TRIGGER tr_attempts_pub BEFORE INSERT ON attempts
FOR EACH ROW EXECUTE FUNCTION set_public_id('attempts');

CREATE TABLE IF NOT EXISTS peer_reviews (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  attempt_id UUID NOT NULL REFERENCES attempts(id) ON DELETE CASCADE,
  reviewer_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  comments TEXT,
  suggested_adjustment NUMERIC,
  finalized_at TIMESTAMPTZ,
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_peer_reviews_attempt ON peer_reviews(org_id, attempt_id);
CREATE TRIGGER tr_peer_reviews_pub BEFORE INSERT ON peer_reviews
FOR EACH ROW EXECUTE FUNCTION set_public_id('peer_reviews');

CREATE TABLE IF NOT EXISTS grades (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  attempt_id UUID NOT NULL REFERENCES attempts(id) ON DELETE CASCADE,
  score_raw NUMERIC,
  percentile NUMERIC,
  tier grade_tier,
  finalized_at TIMESTAMPTZ,
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_grades_attempt ON grades(org_id, attempt_id);
CREATE TRIGGER tr_grades_pub BEFORE INSERT ON grades
FOR EACH ROW EXECUTE FUNCTION set_public_id('grades');

-- =====================================================
-- 8. Operational: Invites, Announcements, Notifications, Billing, Audit
-- =====================================================
CREATE TABLE IF NOT EXISTS invites (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  email TEXT NOT NULL,
  role membership_role NOT NULL,
  payload_json JSONB,
  token TEXT NOT NULL,
  expires_at TIMESTAMPTZ,
  accepted_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_invites_email ON invites(org_id, email);
CREATE TRIGGER tr_invites_pub BEFORE INSERT ON invites
FOR EACH ROW EXECUTE FUNCTION set_public_id('invites');

CREATE TABLE IF NOT EXISTS announcements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  audience announcement_audience NOT NULL,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  publish_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_announcements_pub BEFORE INSERT ON announcements
FOR EACH ROW EXECUTE FUNCTION set_public_id('announcements');

CREATE TABLE IF NOT EXISTS notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  type TEXT NOT NULL,
  payload JSONB,
  read_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE INDEX IF NOT EXISTS idx_notifications_user ON notifications(org_id, user_id, created_at);
CREATE TRIGGER tr_notifications_pub BEFORE INSERT ON notifications
FOR EACH ROW EXECUTE FUNCTION set_public_id('notifications');

CREATE TABLE IF NOT EXISTS billing_records (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  public_id INT,
  plan plan_tier NOT NULL,
  usage_metrics JSONB,
  amount NUMERIC NOT NULL,
  currency TEXT NOT NULL DEFAULT 'USD',
  status TEXT NOT NULL DEFAULT 'pending',
  billing_period_start DATE,
  billing_period_end DATE,
  invoice_url TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (org_id, public_id)
);
CREATE TRIGGER tr_billing_records_pub BEFORE INSERT ON billing_records
FOR EACH ROW EXECUTE FUNCTION set_public_id('billing_records');

-- Partitioned audit log
CREATE TABLE IF NOT EXISTS audit_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  actor_user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  action TEXT NOT NULL,
  entity_type TEXT NOT NULL,
  entity_id UUID,
  diff JSONB,
  ip INET,
  ua TEXT,
  created_at TIMESTAMPTZ NOT NULL
) PARTITION BY RANGE (created_at);

-- Create current month partition (example); in prod, rotate monthly via job
DO $$
DECLARE
  start_month TIMESTAMPTZ := date_trunc('month', now());
  end_month TIMESTAMPTZ := (date_trunc('month', now()) + interval '1 month');
  part_name TEXT := 'audit_logs_' || to_char(start_month, 'YYYY_MM');
BEGIN
  EXECUTE format('CREATE TABLE IF NOT EXISTS %I PARTITION OF audit_logs FOR VALUES FROM (%L) TO (%L);', part_name, start_month, end_month);
END $$;

-- =====================================================
-- 9. Profiles & Analytics
-- =====================================================
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  institute_name TEXT,
  dp_url TEXT,
  phone TEXT,
  socials JSONB,
  prefs JSONB,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (user_id)
);
CREATE TRIGGER tr_user_profiles_updated BEFORE UPDATE ON user_profiles
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TABLE IF NOT EXISTS learning_analytics (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  event_type TEXT NOT NULL,
  event_data JSONB NOT NULL,
  recorded_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_learning_analytics ON learning_analytics(org_id, user_id, recorded_at);

-- =====================================================
-- 10. Indexes & Constraints
-- =====================================================
-- Common helpful indexes
CREATE INDEX IF NOT EXISTS idx_org_memberships_user ON org_memberships(user_id);
CREATE INDEX IF NOT EXISTS idx_role_bindings_user ON role_bindings(user_id);
CREATE INDEX IF NOT EXISTS idx_sections_term ON sections(org_id, term_id);
CREATE INDEX IF NOT EXISTS idx_courses_term ON courses(org_id, term_id);
CREATE INDEX IF NOT EXISTS idx_messages_time ON messages(created_at);

-- Ensure short public_id uniqueness ranges
-- (enforced already via UNIQUE (org_id, public_id) on each table using public_id)

-- =====================================================
-- 11. RLS (stubs) - keep disabled in dev; enable in prod
-- =====================================================
-- Example enablement (uncomment in prod):
-- ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE users ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE org_memberships ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE role_bindings ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE parent_links ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE terms ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE class_levels ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE classes ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE courses ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE sections ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE teacher_assignments ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE enrollments ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE modules ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE lessons ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE assets ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE attendance ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE conversation_participants ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE vector_spaces ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE embedding_docs ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE assessments ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE assessment_items ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE attempts ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE peer_reviews ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE grades ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE invites ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE announcements ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE billing_records ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Example basic policies:
-- CREATE POLICY org_isolation ON courses
--   FOR ALL TO authenticated
--   USING (org_id IN (SELECT org_id FROM org_memberships WHERE user_id = auth.uid()));

-- =====================================================
-- 12. Compatibility & Migration Notes (comments)
-- =====================================================
-- - This v2 schema introduces organizations (replacing institutions), org_memberships (replacing user_institutions),
--   and expands academic hierarchy. Existing data can be migrated with INSERT ... SELECT from legacy tables.
-- - Keep legacy tables during transition; write views if needed to preserve API contracts.
-- - Short numeric public_id values satisfy the requirement for 3-4 digit codes while keeping UUID PKs for scale.